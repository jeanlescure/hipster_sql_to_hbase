grammar SQLInsert
  include SQLRowSupport
  include SQLHelpers

  rule insert
    "INSERT" SPACES ((low_priority / delayed / high_priority) SPACES)? (ignore SPACES)?
    ("INTO" SPACES)? table_name SPACES optional_list_of_columns
    ("VALUES" / "VALUE") optional_spaces groups_of_values {
      def query_type
        :insert
      end
      def tree
        cols = optional_list_of_columns.eval
        cols = [cols] if !cols.is_a? Array
        vals = groups_of_values.eval
        vals = [vals] if !vals.is_a? Array
        vals = [vals] if !vals[0].is_a? Array
        if check_valid(cols,vals)
          {
            :into => table_name.eval,
            :columns => cols,
            :values => vals
          }
        else
          nil
        end
      end
      def check_valid(cols,vals)
        xpected_num = cols.length
        result = true
        vals.each do |val|
          if (val.length != xpected_num)
            result = false
            break
          end
        end
        result
      end
    }
  end

  rule optional_list_of_columns
    list_of_columns SPACES {
      def eval; list_of_columns.eval; end
    }
    / 
    '' { 
      def eval; nil; end 
    }
  end

  rule low_priority
    "LOW_PRIORITY"
  end

  rule delayed
    "DELAYED"
  end

  rule high_priority
    "HIGH_PRIORITY"
  end

  rule ignore
    "IGNORE"
  end

  rule list_of_columns
    "(" optional_spaces one_or_more_column_names optional_spaces ")" { 
      def eval; one_or_more_column_names.eval; end
    }
  end
  
  rule groups_of_values
    OPEN_PARENS optional_spaces list_of_values optional_spaces CLOSE_PARENS optional_spaces "," optional_spaces groups_of_values {
      def eval
        [list_of_values.eval] + groups_of_values.eval
      end
    }
    /
    OPEN_PARENS optional_spaces list_of_values optional_spaces CLOSE_PARENS {
      def eval
        [list_of_values.eval]
      end
    }
  end

  rule list_of_values
    one_or_more_values
    /
    '' { def eval; []; end }
  end

  rule one_or_more_values
    insert_value optional_spaces "," optional_spaces one_or_more_values { 
      def eval
        [insert_value.eval, one_or_more_values.eval].flatten
      end
    }
    / 
    insert_value {
      def eval
        [super]
      end
    }
  end

  rule insert_value
    default_value / primitive
  end

  rule default_value
    "DEFAULT" optional_spaces OPEN_PARENS optional_spaces column_name optional_spaces CLOSE_PARENS { 
      def eval; "DEFAULT"; end
    }
  end
end
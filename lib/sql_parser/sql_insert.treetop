module Guillotine
  module Parser
    grammar SQLInsert
      include SQLPrimitives
      include SQLRowSupport
      include SQLHelpers

      rule insert
        "INSERT" SPACE ((low_priority / delayed / high_priority) SPACE)? (ignore SPACE)?
        ("INTO" SPACE)? table_name SPACE? optional_list_of_columns
        ("VALUES" / "VALUE") SPACE* "(" SPACE* list_of_values SPACE* ")" {
          def eval
            options = {
              :into => table_name.eval.to_sym, 
              :values => [list_of_values.eval].flatten
            }

            case columns = optional_list_of_columns.eval
            when Array
              options.merge!(:columns => columns.map {|col| col.to_sym })
            when String
              options.merge!(:columns => [columns.to_sym])
            end

            Insert.new(options)
          end
        }
      end

      rule optional_list_of_columns
        list_of_columns SPACE {
          def eval; list_of_columns.eval; end
        }
        / 
        '' { 
          def eval; nil; end 
        }
      end

      rule low_priority
        "LOW_PRIORITY"
      end

      rule delayed
        "DELAYED"
      end

      rule high_priority
        "HIGH_PRIORITY"
      end

      rule ignore
        "IGNORE"
      end

      rule list_of_columns
        "(" SPACE? one_or_more_column_names SPACE? ")" { 
          def eval; one_or_more_column_names.eval; end
        }
      end

      rule list_of_values
        one_or_more_values
        /
        '' { def eval; []; end }
      end

      rule one_or_more_values
        insert_value SPACE? "," SPACE? one_or_more_values { 
          def eval
            [insert_value.eval, one_or_more_values.eval]
          end
        }
        / 
        insert_value  
      end

      rule insert_value
        default_value / primitive
      end

      rule default_value
        "DEFAULT" SPACE* 
        OPEN_PARENS SPACE* column_name SPACE* CLOSE_PARENS { 
          def eval; "DEFAULT"; end
        }
      end
    end
  end
end